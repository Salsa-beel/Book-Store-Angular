{"ast":null,"code":"var _class;\nimport { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BooksService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.url = '/assets/books.json';\n  }\n  getpagebooks(page) {\n    return this.httpClient.get('/assets/books.json' + '?page=' + page);\n  }\n  getAllBooks() {\n    return this.httpClient.get('/assets/books.json');\n  }\n  //   getBookById(id: any) {\n  //     return this.http.get(this.url)\n  //     .pipe(map(res) => {\n  //       return res.find((item: { id: any; })=>(item.id == id))\n  //   })\n  // }\n  getBookById(id) {\n    // const url = `${this.url}/${id}`;\n    return this.httpClient.get(this.jsons).pipe(tap(_ => this.log(`fetched hero id=${id}`)));\n  }\n  log(arg0) {\n    throw new Error('Method not implemented.');\n  }\n}\n_class = BooksService;\n_class.ɵfac = function BooksService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAIA,SAAoBA,GAAG,QAAmB,MAAM;;;AAMhD,OAAM,MAAOC,YAAY;EAMvBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAH9B,QAAG,GAAG,oBAAoB;EAGoB;EAE9CC,YAAY,CAACC,IAAY;IAEvB,OAAO,IAAI,CAACF,UAAU,CAACG,GAAG,CAAC,oBAAoB,GAAG,QAAQ,GAAGD,IAAI,CAAC;EACpE;EAEAE,WAAW;IACT,OAAO,IAAI,CAACJ,UAAU,CAACG,GAAG,CAAC,oBAAoB,CAAC;EAClD;EAGF;EACA;EACA;EACA;EACA;EACA;EAGAE,WAAW,CAACC,EAAU;IACpB;IACA,OAAO,IAAI,CAACN,UAAU,CAACG,GAAG,CAAC,IAAI,CAACI,KAAK,CAAC,CAACC,IAAI,CACzCX,GAAG,CAAaY,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,mBAAmBJ,EAAE,EAAE,CAAC,CAAC,CACxD;EACH;EACEI,GAAG,CAACC,IAAY;IACd,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;;SAlCWd,YAAY;;mBAAZA,MAAY;AAAA;;SAAZA,MAAY;EAAAe,SAAZf,MAAY;EAAAgB,YAFX;AAAM","names":["tap","BooksService","constructor","httpClient","getpagebooks","page","get","getAllBooks","getBookById","id","jsons","pipe","_","log","arg0","Error","factory","providedIn"],"sourceRoot":"","sources":["/Users/salsabeel/Desktop/Book-Store-Angular/src/app/books/services/books.service.ts"],"sourcesContent":["import { Injectable, Input } from '@angular/core';\nimport { HttpClient} from '@angular/common/http';\nimport { DetailsofbooksComponent } from '../components/detailsofbooks/detailsofbooks.component';\nimport { map } from 'rxjs/operators';\nimport { Observable,tap,catchError } from 'rxjs';\nimport { Book } from 'src/app/entities/book.entity';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BooksService {\n\n  jsons: any;\n  url = '/assets/books.json';\n  http: any;\n\n  constructor(private httpClient: HttpClient) { }\n\n  getpagebooks(page: number) {\n\n    return this.httpClient.get('/assets/books.json' + '?page=' + page);\n  }\n\n  getAllBooks() {\n    return this.httpClient.get('/assets/books.json');\n  }\n\n\n//   getBookById(id: any) {\n//     return this.http.get(this.url)\n//     .pipe(map(res) => {\n//       return res.find((item: { id: any; })=>(item.id == id))\n//   })\n// }\n\n\ngetBookById(id: number){\n  // const url = `${this.url}/${id}`;\n  return this.httpClient.get(this.jsons).pipe(\n    tap<Book[\"id\"]>(_ => this.log(`fetched hero id=${id}`))\n  );\n}\n  log(arg0: string): void {\n    throw new Error('Method not implemented.');\n  }\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}